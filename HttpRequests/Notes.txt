START THE API
PS C:\Users\user\Desktop\Vibe\Reactivities> cd api
PS C:\Users\user\Desktop\Vibe\Reactivities\api> dotnet watch run

START THE FRONTEND
PS C:\Users\user\Desktop\Vibe\Reactivities> cd client-app
PS C:\Users\user\Desktop\Vibe\Reactivities\client-app> npm start

START THE DB
Start the docker container that holds the Postgres db

MIGRATIONS
PS C:\Users\user\Desktop\Vibe\Reactivities> dotnet ef migrations add IdentityAdded -p Persistance/ -s API
This will create a migration called "IdentityAdded" within (-p) Persistance proj w/ (-s) starter proj API
----------------------------------------------------
When moving to Postgres migration a warnign came up
loadedThe Entity Framework tools version '6.0.2' is older than that of the runtime '6.0.7'. Update the tools for the latest features and bug fixes. See https://aka.ms/AAc1fbw for more information.
info: Microsoft.EntityFrameworkCore.Infrastructure[10403]
      Entity Framework Core 6.0.7 initialized 'DataContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:6.0.6+6fa8f3c27a7c241a66e72a6c09e0b252509215d0' with options: None
Done. To undo this action, use 'ef migrations remove'
PS C:\Users\user\Desktop\Vibe\Reactivities> dotnet tool update -g dotnet-ef
Tool 'dotnet-ef' was successfully updated from version '6.0.2' to version '6.0.7'.
PS C:\Users\user\Desktop\Vibe\Reactivities>
----------------------------------------------------
BUILD FOR PROD - CLIENT APP
Info:    client-app/package.json scripts section (postbuild moves client app to api folder in wwwroot)
Command: npm run build

DOCKER / POSTGRES
docker run --name dev-postgres -e POSTGRES_USER=admin -e POSTGRES_PASSWORD=secret -p 5432:5432 -d postgres:latest

HEROKU
buildpack command to exectue in the terminal in Reactivities folder
            - buildpack address: https://github.com/jincod/dotnetcore-buildpack
            - command: heroku buildpacks:set https://github.com/jincod/dotnetcore-buildpack
git commands:
            - first commit all changes
            - second push (that will deply the app) - git push heroku main

logs in heroku
            - go to the app -> settings -> to the left click More -> View Logs
            - or go to: https://dashboard.heroku.com/apps/bookmealesson/logs
------------------------------------------------------------------------------------------------------------------------------------
HEADERS SECURITY
------------------------------------------------------------------------------------------------------------------------------------
Nuget     - nwebsec.aspnetcore
check url - https://securityheaders.com/


------------------------------------------------------------------------------------------------------------------------------------
MOBX - same function as Redux
// we install mobex and at the same time mobx mobx-react-lite
user@DESKTOP-4QFH7NM MINGW64 ~/Desktop/Vibe/Reactivities/client-app (main)
$ npm install mobx mobx-react-lite

------------------------------------------------------------------------------------------------------------------------------------
#### MOBEX NOTES ####
------------------------------------------------------------------------------------------------------------------------------------
If something does not react ot state changes that might mean that the component that holds this code is not made an observer.

------------------------------------------------------------------------------------------------------------------------------------
#### DEBUGGER NOTES & VIDEO ####
------------------------------------------------------------------------------------------------------------------------------------
Go to debugger to the left click it and from the drop down select attach (this is the profile I need as the app is usuallu running) then click the green triangle to run it and select a link where it says API.exe somethin.
https://www.udemy.com/course/complete-guide-to-building-an-app-with-net-core-and-react/learn/lecture/24835756#overview

------------------------------------------------------------------------------------------------------------------------------------
#### CODE NOTES ####
------------------------------------------------------------------------------------------------------------------------------------
{/**We wrap onClick in arrow func to not get executed imidiately waits until we click the button before doing anything*/}
<Button onClick={() => selectActivity(activity.id)} floated="right"

 {/** anything to the right of && can execute as long as the left part is not null or undefined and they have to be wrapped in {} */}
{selectedActivity && !editMode &&
    <ActivityDetails
        activity={selectedActivity}
        cancelSelectActivity={cancelSelectActivity}
        openForm={openForm}
    />}

-----------
#### Passing Props to component ####
-----------
interface Props {
    activities: Activity[];
    deleteActivity: (id: string) => void;
    submitting: boolean;
}
//export default function ActivityDashboard(props: Props) - saying props is of type Props
export default function ActivityDashboard({ activities, submitting, deleteActivity }: Props){....}
-----------
#### Setting and declaring constants to use in a component ####
-----------
// setActivities sets activities [varToBeSet, funcToSetTheVariable] useState to keep it in the state
const [activities, setActivities] = useState<Activity[]>([]);
//useState<Activity | undefined>(undefined) means that the setSelected can accept Activity or undefined
const [selectedActivity, setSelectedActivity] = useState<Activity | undefined>(undefined);
// we are setting the submitting and sending it down the line to display the loading button
const [submitting, setSubmitting] = useState(false);

------------------------------------------------------------------------------------------------------------------------------------
#### LIBS NOTES ####
------------------------------------------------------------------------------------------------------------------------------------
ts -> typescript
types -> some packages need types for ts to infer the type safety i guess
axios           - for http requests
UUID            - for genrating guids = import { v4 as uuid } from "uuid";
MobX            - for storing state   = import { makeAutoObservable, runInAction } from "mobx";
React-Router    - for routing https://reactrouter.com/
                - install in client-app cmd (v6 contains breaking changes) - npm install react-router-dom@5.3.0      @types/react-router-dom@5.3.2
react-toastify  - toast linrary comes with typescript definition file: npm install react-toastify
formik          - for forms (written in ts)
yup             - used for validation schemas for Formik =
                - install in client-app cmd - npm instll yup
                - add typeScript after that - npm install @types/yup --save-dev
reactdatepicker - install in client-app cmd - npm install react-datepicker
                - ts types - npm install @types/react-datepicker --save-dev
                - we need date fns so to install it we first check what is the version used by datepicker
                - npm ls date-fns then we npm install date-fns@2.28.0 where date-fns... is the version
                - date-fns is for formating dates
react-dropzone  - install in clinet-app cmd = npm install --save react-dropzone
                - used for drag and drop of files to be uploaded
                - has a typescript definition file no need to install open
react-cropper   - install in client-app - cmd npm install --save react-cropper
                - has a typescript definition file no need to install open
SignalR         - cd to C:\Users\user\Desktop\Vibe\Reactivities\client-app> npm install @microsoft/signalr
react scroller  - react infinite scroller
                - install - npm install react-infinite-scroller
                -ts types - npm install @types/react-infinite-scroller


------------------------------------------------------------------------------------------------------------------------------------
#### GIT ####
------------------------------------------------------------------------------------------------------------------------------------
https://github.com/TryCatchLearn/Reactivities/commits/main/client-app

Local resources - C:\Users\user\Desktop\Reactivities RESOURCES